//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CsharpSubset.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class CsharpSubsetParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, WS=26, SIMPLETYPE=27, NAME=28, TEXT=29, COMMENT=30, NUMBER=31, 
		REFERENCE=32;
	public const int
		RULE_program = 0, RULE_usingStmnt = 1, RULE_classInitialization = 2, RULE_classDefinition = 3, 
		RULE_propertyDefinition = 4, RULE_methodDefinition = 5, RULE_stmnt = 6, 
		RULE_varDeclaration = 7, RULE_assignStmnt = 8, RULE_returnStmnt = 9, RULE_expression = 10, 
		RULE_mathExpression = 11, RULE_methodCallStmnt = 12, RULE_lambdaExpression = 13, 
		RULE_parameterList = 14, RULE_typedArgList = 15, RULE_argList = 16, RULE_parameter = 17, 
		RULE_type = 18, RULE_reference = 19, RULE_delegateType = 20, RULE_compileUnit = 21;
	public static readonly string[] ruleNames = {
		"program", "usingStmnt", "classInitialization", "classDefinition", "propertyDefinition", 
		"methodDefinition", "stmnt", "varDeclaration", "assignStmnt", "returnStmnt", 
		"expression", "mathExpression", "methodCallStmnt", "lambdaExpression", 
		"parameterList", "typedArgList", "argList", "parameter", "type", "reference", 
		"delegateType", "compileUnit"
	};

	private static readonly string[] _LiteralNames = {
		null, "'using'", "';'", "'='", "'new'", "'('", "')'", "'class'", "'{'", 
		"'}'", "'public'", "'private'", "'static'", "'void'", "'return'", "'^'", 
		"'+'", "'-'", "'/'", "'*'", "'=>'", "','", "'Action'", "'Func'", "'<'", 
		"'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "WS", "SIMPLETYPE", "NAME", "TEXT", "COMMENT", "NUMBER", "REFERENCE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CsharpSubset.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CsharpSubsetParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CsharpSubsetParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CsharpSubsetParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public UsingStmntContext[] usingStmnt() {
			return GetRuleContexts<UsingStmntContext>();
		}
		public UsingStmntContext usingStmnt(int i) {
			return GetRuleContext<UsingStmntContext>(i);
		}
		public ClassDefinitionContext[] classDefinition() {
			return GetRuleContexts<ClassDefinitionContext>();
		}
		public ClassDefinitionContext classDefinition(int i) {
			return GetRuleContext<ClassDefinitionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 44; usingStmnt();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 50; classDefinition();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingStmntContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(CsharpSubsetParser.NAME, 0); }
		public UsingStmntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingStmnt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterUsingStmnt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitUsingStmnt(this);
		}
	}

	[RuleVersion(0)]
	public UsingStmntContext usingStmnt() {
		UsingStmntContext _localctx = new UsingStmntContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingStmnt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(T__0);
			State = 57; Match(NAME);
			State = 58; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInitializationContext : ParserRuleContext {
		public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public ITerminalNode[] NAME() { return GetTokens(CsharpSubsetParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(CsharpSubsetParser.NAME, i);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ClassInitializationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInitialization; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterClassInitialization(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitClassInitialization(this);
		}
	}

	[RuleVersion(0)]
	public ClassInitializationContext classInitialization() {
		ClassInitializationContext _localctx = new ClassInitializationContext(Context, State);
		EnterRule(_localctx, 4, RULE_classInitialization);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; reference();
			State = 61; Match(NAME);
			State = 62; Match(T__2);
			State = 63; Match(T__3);
			State = 64; Match(NAME);
			State = 65; Match(T__4);
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << NUMBER) | (1L << REFERENCE))) != 0)) {
				{
				State = 66; argList();
				}
			}

			State = 69; Match(T__5);
			State = 70; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefinitionContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(CsharpSubsetParser.NAME, 0); }
		public PropertyDefinitionContext[] propertyDefinition() {
			return GetRuleContexts<PropertyDefinitionContext>();
		}
		public PropertyDefinitionContext propertyDefinition(int i) {
			return GetRuleContext<PropertyDefinitionContext>(i);
		}
		public MethodDefinitionContext[] methodDefinition() {
			return GetRuleContexts<MethodDefinitionContext>();
		}
		public MethodDefinitionContext methodDefinition(int i) {
			return GetRuleContext<MethodDefinitionContext>(i);
		}
		public ClassDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterClassDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitClassDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefinitionContext classDefinition() {
		ClassDefinitionContext _localctx = new ClassDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_classDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(T__6);
			State = 73; Match(NAME);
			State = 74; Match(T__7);
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__21) | (1L << T__22) | (1L << SIMPLETYPE))) != 0)) {
				{
				State = 77;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 75; propertyDefinition();
					}
					break;
				case 2:
					{
					State = 76; methodDefinition();
					}
					break;
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 82; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDefinitionContext : ParserRuleContext {
		public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		public PropertyDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterPropertyDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitPropertyDefinition(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDefinitionContext propertyDefinition() {
		PropertyDefinitionContext _localctx = new PropertyDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_propertyDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9 || _la==T__10) {
				{
				State = 84;
				_la = TokenStream.LA(1);
				if ( !(_la==T__9 || _la==T__10) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 87; Match(T__11);
				}
			}

			State = 90; varDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefinitionContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(CsharpSubsetParser.NAME, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public StmntContext[] stmnt() {
			return GetRuleContexts<StmntContext>();
		}
		public StmntContext stmnt(int i) {
			return GetRuleContext<StmntContext>(i);
		}
		public ReturnStmntContext returnStmnt() {
			return GetRuleContext<ReturnStmntContext>(0);
		}
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterMethodDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitMethodDefinition(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_methodDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9 || _la==T__10) {
				{
				State = 92;
				_la = TokenStream.LA(1);
				if ( !(_la==T__9 || _la==T__10) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 95; Match(T__11);
				}
			}

			State = 100;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__21:
			case T__22:
			case SIMPLETYPE:
				{
				State = 98; type();
				}
				break;
			case T__12:
				{
				State = 99; Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 102; Match(NAME);
			State = 103; Match(T__4);
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__21) | (1L << T__22) | (1L << SIMPLETYPE))) != 0)) {
				{
				State = 104; parameterList();
				}
			}

			State = 107; Match(T__5);
			State = 108; Match(T__7);
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__21) | (1L << T__22) | (1L << SIMPLETYPE) | (1L << NAME) | (1L << REFERENCE))) != 0)) {
				{
				{
				State = 109; stmnt();
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 115; returnStmnt();
				}
			}

			State = 118; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmntContext : ParserRuleContext {
		public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		public AssignStmntContext assignStmnt() {
			return GetRuleContext<AssignStmntContext>(0);
		}
		public MethodCallStmntContext methodCallStmnt() {
			return GetRuleContext<MethodCallStmntContext>(0);
		}
		public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		public ClassInitializationContext classInitialization() {
			return GetRuleContext<ClassInitializationContext>(0);
		}
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public StmntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmnt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterStmnt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitStmnt(this);
		}
	}

	[RuleVersion(0)]
	public StmntContext stmnt() {
		StmntContext _localctx = new StmntContext(Context, State);
		EnterRule(_localctx, 12, RULE_stmnt);
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120; varDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121; assignStmnt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 122; methodCallStmnt();
				State = 123; Match(T__1);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 125; methodDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 126; classInitialization();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 127; lambdaExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(CsharpSubsetParser.NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterVarDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitVarDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclarationContext varDeclaration() {
		VarDeclarationContext _localctx = new VarDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_varDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; type();
			State = 131; Match(NAME);
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 132; Match(T__2);
				State = 133; expression();
				}
			}

			State = 136; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStmntContext : ParserRuleContext {
		public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public MethodCallStmntContext methodCallStmnt() {
			return GetRuleContext<MethodCallStmntContext>(0);
		}
		public AssignStmntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStmnt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterAssignStmnt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitAssignStmnt(this);
		}
	}

	[RuleVersion(0)]
	public AssignStmntContext assignStmnt() {
		AssignStmntContext _localctx = new AssignStmntContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignStmnt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; reference();
			State = 139; Match(T__2);
			State = 142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 140; mathExpression(0);
				}
				break;
			case 2:
				{
				State = 141; methodCallStmnt();
				}
				break;
			}
			State = 144; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmntContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStmntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmnt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterReturnStmnt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitReturnStmnt(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmntContext returnStmnt() {
		ReturnStmntContext _localctx = new ReturnStmntContext(Context, State);
		EnterRule(_localctx, 18, RULE_returnStmnt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(T__13);
			State = 147; expression();
			State = 148; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_expression);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150; mathExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151; lambdaExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 152; reference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathExpressionContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(CsharpSubsetParser.NUMBER, 0); }
		public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public MathExpressionContext[] mathExpression() {
			return GetRuleContexts<MathExpressionContext>();
		}
		public MathExpressionContext mathExpression(int i) {
			return GetRuleContext<MathExpressionContext>(i);
		}
		public MathExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterMathExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitMathExpression(this);
		}
	}

	[RuleVersion(0)]
	public MathExpressionContext mathExpression() {
		return mathExpression(0);
	}

	private MathExpressionContext mathExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MathExpressionContext _localctx = new MathExpressionContext(Context, _parentState);
		MathExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_mathExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 156; Match(NUMBER);
				}
				break;
			case NAME:
			case REFERENCE:
				{
				State = 157; reference();
				}
				break;
			case T__4:
				{
				State = 158; Match(T__4);
				State = 159; mathExpression(0);
				State = 160; Match(T__5);
				}
				break;
			case T__15:
			case T__16:
				{
				State = 162;
				_la = TokenStream.LA(1);
				if ( !(_la==T__15 || _la==T__16) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 163; mathExpression(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 177;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 175;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new MathExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_mathExpression);
						State = 166;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 167; Match(T__14);
						State = 168; mathExpression(4);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_mathExpression);
						State = 169;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 170;
						_la = TokenStream.LA(1);
						if ( !(_la==T__17 || _la==T__18) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 171; mathExpression(3);
						}
						break;
					case 3:
						{
						_localctx = new MathExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_mathExpression);
						State = 172;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 173;
						_la = TokenStream.LA(1);
						if ( !(_la==T__15 || _la==T__16) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 174; mathExpression(2);
						}
						break;
					}
					} 
				}
				State = 179;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MethodCallStmntContext : ParserRuleContext {
		public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public MethodCallStmntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCallStmnt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterMethodCallStmnt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitMethodCallStmnt(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallStmntContext methodCallStmnt() {
		MethodCallStmntContext _localctx = new MethodCallStmntContext(Context, State);
		EnterRule(_localctx, 24, RULE_methodCallStmnt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; reference();
			State = 181; Match(T__4);
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << NUMBER) | (1L << REFERENCE))) != 0)) {
				{
				State = 182; argList();
				}
			}

			State = 185; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public TypedArgListContext typedArgList() {
			return GetRuleContext<TypedArgListContext>(0);
		}
		public StmntContext stmnt() {
			return GetRuleContext<StmntContext>(0);
		}
		public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public ReturnStmntContext returnStmnt() {
			return GetRuleContext<ReturnStmntContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_lambdaExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; Match(T__4);
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
			case NUMBER:
			case REFERENCE:
				{
				State = 188; argList();
				}
				break;
			case T__21:
			case T__22:
			case SIMPLETYPE:
				{
				State = 189; typedArgList();
				}
				break;
			case T__5:
				break;
			default:
				break;
			}
			State = 192; Match(T__5);
			State = 193; Match(T__19);
			State = 194; Match(T__7);
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 195; stmnt();
				}
				break;
			case 2:
				{
				State = 196; mathExpression(0);
				}
				break;
			case 3:
				{
				State = 197; returnStmnt();
				}
				break;
			}
			State = 200; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ReferenceContext[] reference() {
			return GetRuleContexts<ReferenceContext>();
		}
		public ReferenceContext reference(int i) {
			return GetRuleContext<ReferenceContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 28, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; type();
			State = 203; reference();
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__20) {
				{
				{
				State = 204; Match(T__20);
				State = 205; type();
				State = 206; reference();
				}
				}
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedArgListContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ReferenceContext[] reference() {
			return GetRuleContexts<ReferenceContext>();
		}
		public ReferenceContext reference(int i) {
			return GetRuleContext<ReferenceContext>(i);
		}
		public TypedArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterTypedArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitTypedArgList(this);
		}
	}

	[RuleVersion(0)]
	public TypedArgListContext typedArgList() {
		TypedArgListContext _localctx = new TypedArgListContext(Context, State);
		EnterRule(_localctx, 30, RULE_typedArgList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; type();
			State = 214; reference();
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__20) {
				{
				{
				State = 215; Match(T__20);
				State = 216; type();
				State = 217; reference();
				}
				}
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 32, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; parameter();
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__20) {
				{
				{
				State = 225; Match(T__20);
				State = 226; parameter();
				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(CsharpSubsetParser.NUMBER, 0); }
		public MethodCallStmntContext methodCallStmnt() {
			return GetRuleContext<MethodCallStmntContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 34, RULE_parameter);
		try {
			State = 235;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 232; reference();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 233; Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 234; methodCallStmnt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode SIMPLETYPE() { return GetToken(CsharpSubsetParser.SIMPLETYPE, 0); }
		public DelegateTypeContext delegateType() {
			return GetRuleContext<DelegateTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 36, RULE_type);
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SIMPLETYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 237; Match(SIMPLETYPE);
				}
				break;
			case T__21:
			case T__22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238; delegateType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		public ITerminalNode REFERENCE() { return GetToken(CsharpSubsetParser.REFERENCE, 0); }
		public ITerminalNode NAME() { return GetToken(CsharpSubsetParser.NAME, 0); }
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitReference(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		ReferenceContext _localctx = new ReferenceContext(Context, State);
		EnterRule(_localctx, 38, RULE_reference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			_la = TokenStream.LA(1);
			if ( !(_la==NAME || _la==REFERENCE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateTypeContext : ParserRuleContext {
		public ITerminalNode[] SIMPLETYPE() { return GetTokens(CsharpSubsetParser.SIMPLETYPE); }
		public ITerminalNode SIMPLETYPE(int i) {
			return GetToken(CsharpSubsetParser.SIMPLETYPE, i);
		}
		public DelegateTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterDelegateType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitDelegateType(this);
		}
	}

	[RuleVersion(0)]
	public DelegateTypeContext delegateType() {
		DelegateTypeContext _localctx = new DelegateTypeContext(Context, State);
		EnterRule(_localctx, 40, RULE_delegateType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			_la = TokenStream.LA(1);
			if ( !(_la==T__21 || _la==T__22) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__23) {
				{
				State = 244; Match(T__23);
				State = 245; Match(SIMPLETYPE);
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__20) {
					{
					{
					State = 246; Match(T__20);
					State = 247; Match(SIMPLETYPE);
					}
					}
					State = 252;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 253; Match(T__24);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CsharpSubsetParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsharpSubsetListener typedListener = listener as ICsharpSubsetListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(Context, State);
		EnterRule(_localctx, 42, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return mathExpression_sempred((MathExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool mathExpression_sempred(MathExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\"', '\x105', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\a', 
		'\x2', '\x30', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x33', '\v', '\x2', 
		'\x3', '\x2', '\a', '\x2', '\x36', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\x39', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x46', '\n', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'P', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', 'S', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x5', '\x6', 'X', '\n', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'[', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x5', '\a', 
		'`', '\n', '\a', '\x3', '\a', '\x5', '\a', '\x63', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', 'g', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', 'l', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\a', '\a', 'q', '\n', '\a', '\f', '\a', '\xE', '\a', 't', '\v', 
		'\a', '\x3', '\a', '\x5', '\a', 'w', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x83', '\n', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x89', '\n', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', '\x91', '\n', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\x9C', '\n', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\xA7', '\n', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xB2', '\n', '\r', '\f', 
		'\r', '\xE', '\r', '\xB5', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', '\xBA', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xC1', '\n', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\xC9', '\n', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\xD3', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\xD6', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 
		'\xDE', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xE1', '\v', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\xE6', '\n', 
		'\x12', '\f', '\x12', '\xE', '\x12', '\xE9', '\v', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xEE', '\n', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\xF2', '\n', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\a', '\x16', '\xFB', '\n', '\x16', '\f', '\x16', '\xE', 
		'\x16', '\xFE', '\v', '\x16', '\x3', '\x16', '\x5', '\x16', '\x101', '\n', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x2', '\x3', '\x18', 
		'\x18', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '\x2', '\a', '\x3', '\x2', '\f', '\r', '\x3', '\x2', '\x12', 
		'\x13', '\x3', '\x2', '\x14', '\x15', '\x4', '\x2', '\x1E', '\x1E', '\"', 
		'\"', '\x3', '\x2', '\x18', '\x19', '\x2', '\x118', '\x2', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x4', ':', '\x3', '\x2', '\x2', '\x2', '\x6', '>', 
		'\x3', '\x2', '\x2', '\x2', '\b', 'J', '\x3', '\x2', '\x2', '\x2', '\n', 
		'W', '\x3', '\x2', '\x2', '\x2', '\f', '_', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x82', '\x3', '\x2', '\x2', '\x2', '\x10', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x14', '\x94', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xCC', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xD7', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '$', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xF1', '\x3', '\x2', '\x2', '\x2', '(', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '*', '\xF5', '\x3', '\x2', '\x2', '\x2', ',', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '.', '\x30', '\x5', '\x4', '\x3', '\x2', '/', '.', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x37', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x36', '\x5', '\b', '\x5', '\x2', 
		'\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x39', '\x37', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', '\x3', '\x2', 
		'\x2', ';', '<', '\a', '\x1E', '\x2', '\x2', '<', '=', '\a', '\x4', '\x2', 
		'\x2', '=', '\x5', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x5', '(', '\x15', 
		'\x2', '?', '@', '\a', '\x1E', '\x2', '\x2', '@', '\x41', '\a', '\x5', 
		'\x2', '\x2', '\x41', '\x42', '\a', '\x6', '\x2', '\x2', '\x42', '\x43', 
		'\a', '\x1E', '\x2', '\x2', '\x43', '\x45', '\a', '\a', '\x2', '\x2', 
		'\x44', '\x46', '\x5', '\"', '\x12', '\x2', '\x45', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\b', '\x2', '\x2', 'H', 'I', 
		'\a', '\x4', '\x2', '\x2', 'I', '\a', '\x3', '\x2', '\x2', '\x2', 'J', 
		'K', '\a', '\t', '\x2', '\x2', 'K', 'L', '\a', '\x1E', '\x2', '\x2', 'L', 
		'Q', '\a', '\n', '\x2', '\x2', 'M', 'P', '\x5', '\n', '\x6', '\x2', 'N', 
		'P', '\x5', '\f', '\a', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 
		'N', '\x3', '\x2', '\x2', '\x2', 'P', 'S', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'R', 'T', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\a', '\v', '\x2', '\x2', 'U', '\t', '\x3', '\x2', '\x2', '\x2', 
		'V', 'X', '\t', '\x2', '\x2', '\x2', 'W', 'V', '\x3', '\x2', '\x2', '\x2', 
		'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'Y', '[', '\a', '\xE', '\x2', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\\', ']', '\x5', '\x10', '\t', '\x2', ']', '\v', '\x3', '\x2', 
		'\x2', '\x2', '^', '`', '\t', '\x2', '\x2', '\x2', '_', '^', '\x3', '\x2', 
		'\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '\x63', '\a', '\xE', '\x2', '\x2', '\x62', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x66', '\x3', '\x2', '\x2', '\x2', '\x64', 'g', '\x5', 
		'&', '\x14', '\x2', '\x65', 'g', '\a', '\xF', '\x2', '\x2', '\x66', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', '\x1E', '\x2', '\x2', 
		'i', 'k', '\a', '\a', '\x2', '\x2', 'j', 'l', '\x5', '\x1E', '\x10', '\x2', 
		'k', 'j', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 
		'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', '\b', '\x2', '\x2', 
		'n', 'r', '\a', '\n', '\x2', '\x2', 'o', 'q', '\x5', '\xE', '\b', '\x2', 
		'p', 'o', '\x3', '\x2', '\x2', '\x2', 'q', 't', '\x3', '\x2', '\x2', '\x2', 
		'r', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 
		's', 'v', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 
		'u', 'w', '\x5', '\x14', '\v', '\x2', 'v', 'u', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\a', '\v', '\x2', '\x2', 'y', '\r', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x83', '\x5', '\x10', '\t', '\x2', '{', '\x83', '\x5', '\x12', '\n', 
		'\x2', '|', '}', '\x5', '\x1A', '\xE', '\x2', '}', '~', '\a', '\x4', '\x2', 
		'\x2', '~', '\x83', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x83', '\x5', 
		'\f', '\a', '\x2', '\x80', '\x83', '\x5', '\x6', '\x4', '\x2', '\x81', 
		'\x83', '\x5', '\x1C', '\xF', '\x2', '\x82', 'z', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '{', '\x3', '\x2', '\x2', '\x2', '\x82', '|', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x82', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '\xF', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x5', '&', 
		'\x14', '\x2', '\x85', '\x88', '\a', '\x1E', '\x2', '\x2', '\x86', '\x87', 
		'\a', '\x5', '\x2', '\x2', '\x87', '\x89', '\x5', '\x16', '\f', '\x2', 
		'\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\x3', '\x2', 
		'\x2', '\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', 
		'\a', '\x4', '\x2', '\x2', '\x8B', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8D', '\x5', '(', '\x15', '\x2', '\x8D', '\x90', '\a', '\x5', 
		'\x2', '\x2', '\x8E', '\x91', '\x5', '\x18', '\r', '\x2', '\x8F', '\x91', 
		'\x5', '\x1A', '\xE', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x93', '\a', '\x4', '\x2', '\x2', '\x93', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', '\x10', '\x2', '\x2', 
		'\x95', '\x96', '\x5', '\x16', '\f', '\x2', '\x96', '\x97', '\a', '\x4', 
		'\x2', '\x2', '\x97', '\x15', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9C', 
		'\x5', '\x18', '\r', '\x2', '\x99', '\x9C', '\x5', '\x1C', '\xF', '\x2', 
		'\x9A', '\x9C', '\x5', '(', '\x15', '\x2', '\x9B', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9A', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\x9E', '\b', '\r', '\x1', '\x2', '\x9E', '\xA7', '\a', '!', '\x2', 
		'\x2', '\x9F', '\xA7', '\x5', '(', '\x15', '\x2', '\xA0', '\xA1', '\a', 
		'\a', '\x2', '\x2', '\xA1', '\xA2', '\x5', '\x18', '\r', '\x2', '\xA2', 
		'\xA3', '\a', '\b', '\x2', '\x2', '\xA3', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA5', '\t', '\x3', '\x2', '\x2', '\xA5', '\xA7', '\x5', 
		'\x18', '\r', '\x5', '\xA6', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA9', '\f', '\x6', '\x2', '\x2', '\xA9', 
		'\xAA', '\a', '\x11', '\x2', '\x2', '\xAA', '\xB2', '\x5', '\x18', '\r', 
		'\x6', '\xAB', '\xAC', '\f', '\x4', '\x2', '\x2', '\xAC', '\xAD', '\t', 
		'\x4', '\x2', '\x2', '\xAD', '\xB2', '\x5', '\x18', '\r', '\x5', '\xAE', 
		'\xAF', '\f', '\x3', '\x2', '\x2', '\xAF', '\xB0', '\t', '\x3', '\x2', 
		'\x2', '\xB0', '\xB2', '\x5', '\x18', '\r', '\x4', '\xB1', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\x19', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x5', '(', '\x15', 
		'\x2', '\xB7', '\xB9', '\a', '\a', '\x2', '\x2', '\xB8', '\xBA', '\x5', 
		'\"', '\x12', '\x2', '\xB9', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBC', '\a', '\b', '\x2', '\x2', '\xBC', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xC0', '\a', '\a', '\x2', '\x2', '\xBE', 
		'\xC1', '\x5', '\"', '\x12', '\x2', '\xBF', '\xC1', '\x5', ' ', '\x11', 
		'\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\a', '\b', '\x2', 
		'\x2', '\xC3', '\xC4', '\a', '\x16', '\x2', '\x2', '\xC4', '\xC8', '\a', 
		'\n', '\x2', '\x2', '\xC5', '\xC9', '\x5', '\xE', '\b', '\x2', '\xC6', 
		'\xC9', '\x5', '\x18', '\r', '\x2', '\xC7', '\xC9', '\x5', '\x14', '\v', 
		'\x2', '\xC8', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xCB', '\a', '\v', '\x2', '\x2', '\xCB', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xCD', '\x5', '&', '\x14', '\x2', '\xCD', 
		'\xD4', '\x5', '(', '\x15', '\x2', '\xCE', '\xCF', '\a', '\x17', '\x2', 
		'\x2', '\xCF', '\xD0', '\x5', '&', '\x14', '\x2', '\xD0', '\xD1', '\x5', 
		'(', '\x15', '\x2', '\xD1', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\x5', '&', '\x14', 
		'\x2', '\xD8', '\xDF', '\x5', '(', '\x15', '\x2', '\xD9', '\xDA', '\a', 
		'\x17', '\x2', '\x2', '\xDA', '\xDB', '\x5', '&', '\x14', '\x2', '\xDB', 
		'\xDC', '\x5', '(', '\x15', '\x2', '\xDC', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '!', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE7', '\x5', 
		'$', '\x13', '\x2', '\xE3', '\xE4', '\a', '\x17', '\x2', '\x2', '\xE4', 
		'\xE6', '\x5', '$', '\x13', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE6', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\xEA', '\xEE', '\x5', '(', '\x15', '\x2', '\xEB', '\xEE', '\a', 
		'!', '\x2', '\x2', '\xEC', '\xEE', '\x5', '\x1A', '\xE', '\x2', '\xED', 
		'\xEA', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\xF2', '\a', '\x1D', '\x2', '\x2', '\xF0', 
		'\xF2', '\x5', '*', '\x16', '\x2', '\xF1', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xF4', '\t', '\x5', '\x2', '\x2', '\xF4', 
		')', '\x3', '\x2', '\x2', '\x2', '\xF5', '\x100', '\t', '\x6', '\x2', 
		'\x2', '\xF6', '\xF7', '\a', '\x1A', '\x2', '\x2', '\xF7', '\xFC', '\a', 
		'\x1D', '\x2', '\x2', '\xF8', '\xF9', '\a', '\x17', '\x2', '\x2', '\xF9', 
		'\xFB', '\a', '\x1D', '\x2', '\x2', '\xFA', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\x101', '\a', '\x1B', '\x2', '\x2', '\x100', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\x101', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\a', '\x2', '\x2', 
		'\x3', '\x103', '-', '\x3', '\x2', '\x2', '\x2', ' ', '\x31', '\x37', 
		'\x45', 'O', 'Q', 'W', 'Z', '_', '\x62', '\x66', 'k', 'r', 'v', '\x82', 
		'\x88', '\x90', '\x9B', '\xA6', '\xB1', '\xB3', '\xB9', '\xC0', '\xC8', 
		'\xD4', '\xDF', '\xE7', '\xED', '\xF1', '\xFC', '\x100',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
